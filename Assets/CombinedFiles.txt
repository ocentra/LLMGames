// File: DeckManager.cs

using OcentraAI.LLMGames.Scriptable;
using OcentraAI.LLMGames.Scriptable.ScriptableSingletons;
using OcentraAI.LLMGames.ThreeCardBrag.Events;
using OcentraAI.LLMGames.Utilities;
using Sirenix.OdinInspector;
using System.Collections.Generic;
using UnityEngine;

namespace OcentraAI.LLMGames.ThreeCardBrag.Manager
{

    public class DeckManager
    {
        [ShowInInspector] public List<Card> DeckCards { get; private set; } = new List<Card>();
        [ShowInInspector] public List<Card> FloorCards { get; private set; } = new List<Card>();
        [ShowInInspector] public Card BackCard => Deck.Instance.BackCard;
        [ShowInInspector] public int TotalCards => Deck.Instance.CardTemplates.Count;
        [ShowInInspector] public int RemainingCards => DeckCards.Count;
        [ShowInInspector] public int FloorCardsCount => FloorCards.Count;
        [ShowInInspector] public Card FloorCard { get; set; }
        [ShowInInspector] public Card SwapCard { get; set; }
        [ShowInInspector] public Card TrumpCard { get; private set; }
        [ShowInInspector] private Queue<Card> LastDrawnTrumpCards { get; set; } = new Queue<Card>();

        [ShowInInspector] TurnManager TurnManager { get; set; }
        public DeckManager()
        {

        }
        public void Init(TurnManager turnManager)
        {
            TurnManager = turnManager;
            DeckCards = new List<Card>(Deck.Instance.CardTemplates);

        }

        public void OnSetFloorCard(SetFloorCard e)
        {
            if (e.SwapCard != null)
            {
                OnSetFloorCardList(e.SwapCard);
                FloorCard = null;
                EventBus.Publish(new UpdateFloorCard(null,true));

            }
            else
            {
                if (FloorCard !=null)
                {
                    OnSetFloorCardList(FloorCard);

                }
                FloorCard = DrawCard();
                EventBus.Publish(new UpdateFloorCard(FloorCard));

            }

        }




        public void Shuffle()
        {
            for (int i = 0; i < DeckCards.Count; i++)
            {
                Card temp = DeckCards[i];
                int randomIndex = Random.Range(i, DeckCards.Count);
                DeckCards[i] = DeckCards[randomIndex];
                DeckCards[randomIndex] = temp;
            }
        }

        public Card DrawCard()
        {
            if (DeckCards.Count == 0) return null;
            Shuffle();
            Card card = DeckCards[0];
            DeckCards.RemoveAt(0);
            return card;
        }

        public void OnSetFloorCardList(Card floorCard)
        {
            if (!FloorCards.Contains(floorCard))
            {
                FloorCards.Add(floorCard);
                EventBus.Publish(new UpdateFloorCardList(floorCard));
            }
        }


        public void SetRandomTrumpCard()
        {
            List<Card> cards = new List<Card>(Deck.Instance.CardTemplates);

            if (cards.Count == 0) return;

            Card trumpCard = null;
            bool validCardFound = false;
            while (!validCardFound)
            {
                int randomIndex = Random.Range(0, cards.Count);
                trumpCard = cards[randomIndex];

                if (!LastDrawnTrumpCards.Contains(trumpCard))
                {
                    validCardFound = true;
                    TrumpCard = trumpCard;
                }
            }

            LastDrawnTrumpCards.Enqueue(trumpCard);

            if (LastDrawnTrumpCards.Count > 10)
            {
                LastDrawnTrumpCards.Dequeue();
            }

            EventBus.Publish(new UpdateTrumpCard(TrumpCard));

        }


        public void ResetForNewGame()
        {
            ResetForNewRound();
            LastDrawnTrumpCards = new Queue<Card>();

        }

        public void ResetForNewRound()
        {
            FloorCards.Clear();
            Shuffle();

            SetRandomTrumpCard();
            FloorCard = null;
            EventBus.Publish(new UpdateFloorCard(null,true));
            EventBus.Publish(new UpdateFloorCardList(null,true));
            EventBus.Publish(new UpdateTrumpCard(null,true));

        }


        private void Log(string message)
        {
            GameLogger.Log($"{nameof(DeckManager)} {message}");
        }

        private void LogError(string message)
        {
            GameLogger.LogError($"{nameof(DeckManager)}  {message}");
        }

    }
}

// ---

// File: GameManager.cs

using OcentraAI.LLMGames.Authentication;
using OcentraAI.LLMGames.LLMServices;
using OcentraAI.LLMGames.Scriptable.ScriptableSingletons;
using OcentraAI.LLMGames.ThreeCardBrag.Events;
using OcentraAI.LLMGames.ThreeCardBrag.Players;
using OcentraAI.LLMGames.Utilities;
using Sirenix.OdinInspector;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using UnityEngine;
using static OcentraAI.LLMGames.Utility;
using Random = UnityEngine.Random;

namespace OcentraAI.LLMGames.ThreeCardBrag.Manager
{
    [RequireComponent(typeof(LLMManager))]
    public class GameManager : MonoBehaviour
    {
        #region Fields and Properties

        // Singleton instance
        public static GameManager Instance { get; private set; }

        // Game configuration
        [ShowInInspector] public int MaxRounds { get; private set; } = 10;

        // Managers
        [ShowInInspector, ReadOnly] public PlayerManager PlayerManager { get; private set; }
        [ShowInInspector, ReadOnly] public ScoreManager ScoreManager { get; private set; }
        [ShowInInspector, ReadOnly] public DeckManager DeckManager { get; private set; }
        [ShowInInspector] public TurnManager TurnManager { get; private set; }

        // Helpers
        public AIHelper AIHelper { get; private set; }
        public CancellationTokenSource GlobalCancellationTokenSource { get; set; }

        #endregion

        #region Unity Lifecycle Methods

        private void Awake()
        {
            if (Instance == null)
            {
                Instance = this;
                DontDestroyOnLoad(gameObject);
            }
            else
            {
                Destroy(gameObject);
            }
        }

        private void Start()
        {
            if (IsCancellationRequested()) return;

            AuthenticationManager.Instance.AuthenticationCompleted += async () =>
            {
                await InitializeGameAsync();
            };
        }

        #endregion

        #region Initialization

        private async Task InitializeGameAsync()
        {
            if (IsCancellationRequested()) return;

            await Task.WhenAll(
                InitializeDeck(),
                InitializePlayers(),
                InitializeOtherManagers(),
                InitializeUIPlayers()
               
            );

            await StartNewGameAsync();
        }

        private Task InitializeDeck()
        {
            DeckManager = new DeckManager();
            EventBus.Subscribe<SetFloorCard>(DeckManager.OnSetFloorCard);

            return Task.CompletedTask;
        }

        private Task InitializePlayers()
        {
            ScoreManager = new ScoreManager();

            TurnManager = new TurnManager();

            PlayerManager = new PlayerManager();

            DeckManager.Init(TurnManager);

            ScoreManager.Init(PlayerManager,TurnManager);

            PlayerManager.Init(DeckManager,ScoreManager,TurnManager);

            TurnManager.Init(GlobalCancellationTokenSource,PlayerManager);

            PlayerManager.AddPlayer(AuthenticationManager.Instance.PlayerData, PlayerType.Human);

            PlayerData playerData = new PlayerData { PlayerID = Guid.NewGuid().ToString(), PlayerName = nameof(ComputerPlayer) };
            PlayerManager.AddPlayer(playerData, PlayerType.Computer);


            
            return Task.CompletedTask;
        }

        private Task InitializeOtherManagers()
        {

            AIHelper = new AIHelper(GameInfo.Instance, this);
            return Task.CompletedTask;
        }



        private Task InitializeUIPlayers()
        {
            TaskCompletionSource<bool> initializedUIPlayersSource = new TaskCompletionSource<bool>();

            EventBus.Publish(new InitializeUIPlayers(initializedUIPlayersSource, this));

            return initializedUIPlayersSource.Task;
        }

        #endregion

        #region Event Subscriptions

        private void OnEnable()
        {
            GlobalCancellationTokenSource = new CancellationTokenSource();
#if UNITY_EDITOR
            UnityEditor.EditorApplication.playModeStateChanged += OnPlayModeStateChanged;
#endif

            SubscribeToEvents();
        }

        private void OnDisable()
        {
            GlobalCancellationTokenSource?.Cancel();
            GlobalCancellationTokenSource?.Dispose();
#if UNITY_EDITOR
            UnityEditor.EditorApplication.playModeStateChanged -= OnPlayModeStateChanged;
#endif

            UnsubscribeFromEvents();
        }

        private void SubscribeToEvents()
        {
            EventBus.Subscribe<PlayerActionStartNewGame>(OnPlayerActionStartNewGame);
            EventBus.Subscribe<PlayerActionContinueGame>(OnPlayerActionContinueGame);
            EventBus.Subscribe<PlayerActionEvent>(OnPlayerAction);
            EventBus.Subscribe<PlayerActionRaiseBet>(OnPlayerActionRaiseBet);
            EventBus.Subscribe<PlayerActionPickAndSwap>(OnPlayerActionPickAndSwap);
            EventBus.Subscribe<PurchaseCoins>(OnPurchaseCoins);
        }

        private void UnsubscribeFromEvents()
        {
            EventBus.Unsubscribe<PlayerActionStartNewGame>(OnPlayerActionStartNewGame);
            EventBus.Unsubscribe<PlayerActionContinueGame>(OnPlayerActionContinueGame);
            EventBus.Unsubscribe<PlayerActionEvent>(OnPlayerAction);
            EventBus.Unsubscribe<PlayerActionRaiseBet>(OnPlayerActionRaiseBet);
            EventBus.Unsubscribe<PlayerActionPickAndSwap>(OnPlayerActionPickAndSwap);
            EventBus.Unsubscribe<PurchaseCoins>(OnPurchaseCoins);
            EventBus.Unsubscribe<SetFloorCard>(DeckManager.OnSetFloorCard);
        }

        #endregion

        #region Event Handlers and Utilities

        private async void OnPlayerActionStartNewGame(PlayerActionStartNewGame obj)
        {
            if (IsCancellationRequested()) return;

            await StartNewGameAsync();
        }

        private async void OnPlayerActionContinueGame(PlayerActionContinueGame e)
        {
            if (IsCancellationRequested()) return;

            if (e.ShouldContinue)
            {
                await StartNewRoundAsync();
            }
            else
            {
                await StartNewGameAsync();
            }
        }

        private async void OnPlayerAction(PlayerActionEvent e)
        {
            if (IsCancellationRequested()) return;

            if (TurnManager.CurrentPlayer.GetType() == e.CurrentPlayerType)
            {
                await ProcessPlayerAction(e.Action);
            }
        }

        private async void OnPlayerActionRaiseBet(PlayerActionRaiseBet e)
        {
            if (IsCancellationRequested()) return;

            if (TurnManager.CurrentPlayer.GetType() == e.CurrentPlayerType)
            {
                if (string.IsNullOrEmpty(e.Amount))
                {
                    ShowMessage($"Please Set RaiseAmount! Needs to be higher than CurrentBet {ScoreManager.CurrentBet}");
                    return;
                }

                if (int.TryParse(e.Amount, out int raiseAmount) && raiseAmount > ScoreManager.CurrentBet)
                {
                    int newBet = raiseAmount;
                    if (raiseAmount <= 0) // this will happen from computer atm
                    {
                        float randomMultiplier = Random.Range(0.25f, 3f);
                        // because raise have to be double + if just double it's normal bet!
                        newBet = (int)(ScoreManager.CurrentBet * 2 + ScoreManager.CurrentBet * randomMultiplier);
                    }

                    var (success, errorMessage) = ScoreManager.ProcessRaise(newBet);

                    if (success)
                    {
                        await SwitchTurn();
                    }
                    else
                    {
                        ShowMessage($"{errorMessage} You need to fold!");
                        await Fold();
                    }
                }
                else
                {
                    ShowMessage($"RaiseAmount {raiseAmount} Needs to be higher than CurrentBet {ScoreManager.CurrentBet}");
                }
            }
        }

        private void OnPlayerActionPickAndSwap(PlayerActionPickAndSwap e)
        {
            if (IsCancellationRequested()) return;

            if (e.CurrentPlayerType == TurnManager.CurrentPlayer.GetType())
            {
                TurnManager.CurrentPlayer.PickAndSwap(e.FloorCard, e.SwapCard);
            }
        }

        private void OnPurchaseCoins(PurchaseCoins obj)
        {
            // This method would interface with the external service to handle coin purchases
            // For now, we'll just add the coins directly
            PlayerManager.HumanPlayer.AdjustCoins(obj.Amount);
        }

        private async void ShowMessage(string message, bool delay = true, float delayTime = 5f)
        {
            EventBus.Publish(new UIMessage(message, delayTime));
            if (delay)
            {
                await DelayWithCancellation(GlobalCancellationTokenSource, (int)delayTime * 1000);
            }
        }

        private void Log(string message)
        {
            GameLogger.Log($"{nameof(GameManager)} {message}");
        }

        private void LogError(string message)
        {
            GameLogger.LogError($"{nameof(GameManager)}  {message}");
        }

        private bool IsCancellationRequested()
        {
            return GlobalCancellationTokenSource?.IsCancellationRequested ?? false;
        }

#if UNITY_EDITOR
        private void OnPlayModeStateChanged(UnityEditor.PlayModeStateChange state)
        {
            if (state == UnityEditor.PlayModeStateChange.ExitingPlayMode)
            {
                GlobalCancellationTokenSource.Cancel();
            }
        }
#endif

        #endregion

        #region Game Flow Control

        public async Task StartNewGameAsync()
        {
            PlayerManager.ResetForNewGame();
            DeckManager.ResetForNewGame();
            ScoreManager.ResetForNewGame();
            TurnManager.ResetForNewGame();
            EventBus.Publish(new NewGameEventArgs(this, $"Starting new game"));

            await StartNewRoundAsync();
        }

        private async Task StartNewRoundAsync()
        {
            DeckManager.ResetForNewRound();
            PlayerManager.ResetForNewRound();
            ScoreManager.ResetForNewRound();
            TurnManager.ResetForNewRound();
            TurnManager.StartTurn();
            
            EventBus.Publish(new UpdateGameState(this, isNewRound: true));

            await PlayerTurnAsync();
        }

        private async Task PlayerTurnAsync()
        {
            EventBus.Publish(new UpdateGameState(this));

            if (TurnManager.CurrentPlayer is HumanPlayer)
            {
                await WaitForPlayerActionAndSwitchTurnAsync();
            }
            else if (TurnManager.CurrentPlayer is ComputerPlayer computerPlayer)
            {
                await Task.Delay(100);
                await computerPlayer.MakeDecision(ScoreManager.CurrentBet);
                await WaitForPlayerActionAndSwitchTurnAsync();
            }
        }

        private async Task WaitForPlayerActionAndSwitchTurnAsync()
        {
            if (IsCancellationRequested()) return;

            using CancellationTokenSource cancellationTokenSource = CancellationTokenSource.CreateLinkedTokenSource(GlobalCancellationTokenSource.Token);

            Task completedTask = await Task.WhenAny(TurnManager.ActionCompletionSource.Task, TurnManager.TimerCompletionSource.Task);

            if (completedTask == TurnManager.ActionCompletionSource.Task)
            {
                await TurnManager.StopTurn();
            }
            else if (completedTask == TurnManager.TimerCompletionSource.Task)
            {
                ShowMessage("Time's up! Placing automatic bet.");
                await ProcessPlayerAction(PlayerAction.Bet);
            }

            cancellationTokenSource.Cancel();
        }

        private async Task SwitchTurn()
        {
            await TurnManager.SwitchTurn();
            await PlayerTurnAsync();
        }

        #endregion

        #region Player Actions

        private async Task ProcessPlayerAction(PlayerAction action)
        {
            string message = $"<color={GetColor(Color.white)}>Player : </color> <color={GetColor(Color.blue)}>{TurnManager.CurrentPlayer.PlayerName}</color>" +
                             $"{Environment.NewLine}<color={GetColor(Color.white)}>PlayerAction : </color> <color={GetColor(Color.green)}>{action.ToString()}</color>" +
                             $"{Environment.NewLine}<color={GetColor(Color.white)}>Current bet : </color> <color={GetColor(Color.yellow)}>{ScoreManager.CurrentBet}</color>" +
                             $"{Environment.NewLine}<color={GetColor(Color.white)}>Player coins : </color> <color={GetColor(Color.yellow)}>{TurnManager.CurrentPlayer.Coins}</color>";

            ShowMessage(message, false);

            switch (action)
            {
                case PlayerAction.SeeHand:
                case PlayerAction.DrawFromDeck:
                    HandleViewingActions(action);
                    break;
                case PlayerAction.PlayBlind:
                case PlayerAction.Bet:
                    await HandleBettingActions(action);
                    break;
                case PlayerAction.Fold:
                    await Fold();
                    break;
                case PlayerAction.Show:
                    await Show();
                    break;
            }
        }

        private void HandleViewingActions(PlayerAction action)
        {
            switch (action)
            {
                case PlayerAction.SeeHand:
                    TurnManager.CurrentPlayer.SeeHand();
                    break;
                case PlayerAction.DrawFromDeck:
                    TurnManager.CurrentPlayer.DrawFromDeck();
                    break;
            }

            EventBus.Publish(new UpdateGameState(this));
            TurnManager.ActionCompletionSource.TrySetResult(true);
        }

        private async Task HandleBettingActions(PlayerAction action)
        {
            switch (action)
            {
                case PlayerAction.PlayBlind:
                    await PlayBlind();
                    break;
                case PlayerAction.Bet:
                    await Bet();
                    break;
            }

            await SwitchTurn();
        }

        private async Task PlayBlind()
        {
            var (success, errorMessage) = ScoreManager.ProcessBlindBet();

            if (success)
            {
                TurnManager.ActionCompletionSource.TrySetResult(true);
            }
            else
            {
                ShowMessage($"{errorMessage} You need to fold!");
                await Fold();
            }
        }

        private async Task Bet()
        {
            var (success, errorMessage) = ScoreManager.ProcessRegularBet();

            if (success)
            {
                TurnManager.ActionCompletionSource.TrySetResult(true);
            }
            else
            {
                ShowMessage($"{errorMessage} You need to fold!");
                await Fold();
            }
        }

        private async Task Fold()
        {
            ScoreManager.ProcessFold();
            TurnManager.CallShow();

            await EndRound(PlayerManager.GetActivePlayers(), false);
        }

        private async Task Show()
        {
            var (success, errorMessage) = ScoreManager.ProcessShowBet();

            if (success)
            {
                TurnManager.CallShow();
                await DetermineWinner();
            }
            else
            {
                ShowMessage($"{errorMessage} You need to fold!");
                await Fold();
            }
        }

        #endregion

        #region Game End and Continuation

        private async Task DetermineWinner()
        {
            List<Player> activePlayers = PlayerManager.GetActivePlayers();
            if (activePlayers.Count == 0)
            {
                ShowMessage("No active players found when determining winner");
                return;
            }

            int highestHandValue = activePlayers.Max(p => p.CalculateHandValue());
            List<Player> potentialWinners = activePlayers.Where(p => p.CalculateHandValue() == highestHandValue).ToList();

            if (potentialWinners.Count == 1)
            {
                await EndRound(potentialWinners, true);
                return;
            }

            int highestCardValue = potentialWinners.Max(p => p.GetHighestCardValue());
            List<Player> winners = potentialWinners.Where(p => p.GetHighestCardValue() == highestCardValue).ToList();

            await EndRound(winners, true);
        }

        private async Task EndRound(List<Player> winners, bool showHand)
        {
            await TurnManager.StopTurn();

            if (winners.Count == 0)
            {
                Debug.LogError("EndRound called with no winners");
                return;
            }

            if (winners.Count > 1)
            {
                HandleTie(winners, showHand);
            }
            else
            {
                await HandleSingleWinner(winners[0], showHand);
            }


        }

        private void HandleTie(List<Player> winners, bool showHand)
        {
            if (ScoreManager.AwardTiedPot(winners))
            {
                string winnerNames = string.Join(", ", winners.Select(w => w.PlayerName));
                EventBus.Publish(new UpdateRoundDisplay(ScoreManager));
                EventBus.Publish(new UpdateGameState(this));
                OfferContinuation(showHand, $"It's a tie between {winnerNames}! The pot has been split.");
            }
            else
            {
                Debug.LogError("Failed to award tied pot");
            }
        }

        private async Task HandleSingleWinner(Player winner, bool showHand)
        {
            if (ScoreManager.AddToRoundScores(winner, ScoreManager.Pot) &&
                ScoreManager.AwardPotToWinner(winner))
            {
                EventBus.Publish(new UpdateRoundDisplay(ScoreManager));
                EventBus.Publish(new UpdateGameState(this));

                if (PlayerManager.GetActivePlayers().Any(p => p.Coins <= 0))
                {
                    await EndGame();
                }
                else
                {
                    await CheckForContinuation(showHand, winner);
                }
            }
            else
            {
                Debug.LogError("Failed to award pot to winner");
            }
        }

        private async Task CheckForContinuation(bool showHand, Player winner)
        {
            string message = ColouredMessage("Round Over!", Color.red) +
                             ColouredMessage($"{winner.PlayerName} ", Color.white, true) + ColouredMessage($"wins the round!", Color.cyan) +
                             $"{Environment.NewLine}" +
                             ColouredMessage("Continue Next Rounds ?", Color.red, true);

            if (TurnManager.CurrentRound >= MaxRounds)
            {
                var leaderboard = ScoreManager.GetLeaderboard();
                if (leaderboard.Count > 1 && leaderboard[0].TotalWinnings > leaderboard[1].TotalWinnings)
                {
                    await EndGame();
                }
                else
                {
                    OfferContinuation(showHand, message);
                }
            }
            else
            {
                OfferContinuation(showHand, message);
            }
        }

        private void OfferContinuation(bool showHand, string message)
        {
            EventBus.Publish(new OfferContinuation(10, message));
            TurnManager.CallShow();
            PlayerManager.ShowHand(showHand);
        }

        private Task EndGame()
        {
            var (winnerId, winCount) = ScoreManager.GetOverallWinner();
            Player winner = winnerId == PlayerManager.HumanPlayer.Id ? PlayerManager.HumanPlayer : PlayerManager.ComputerPlayer;

            TurnManager.CallShow();
            PlayerManager.ShowHand(true);


            string message = ColouredMessage("Game Over!", Color.red) +
                             ColouredMessage($"{winner.PlayerName}", Color.white, true) +
                             ColouredMessage($"wins the game with {winCount} rounds!", Color.cyan) +
                             $"{Environment.NewLine}" +
                             ColouredMessage("Play New Game of 10 rounds ?", Color.red, true);

            EventBus.Publish(new OfferNewGame(60, message));
            return Task.CompletedTask;
        }

        #endregion
    }


}


// ---

// File: TurnManager.cs

using OcentraAI.LLMGames.ThreeCardBrag.Events;
using OcentraAI.LLMGames.ThreeCardBrag.Players;
using OcentraAI.LLMGames.Utilities;
using Sirenix.OdinInspector;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace OcentraAI.LLMGames.ThreeCardBrag.Manager
{
    [System.Serializable]
    public class TurnManager
    {
        [ShowInInspector] private List<Player> Players { get; set; }
        [ShowInInspector] public Player CurrentPlayer { get; private set; }
        [ShowInInspector] public Player RoundStarter { get; private set; }
        [ShowInInspector] public Player LastRoundWinner { get; private set; }
        [ShowInInspector] public Player LastBettor { get; private set; }
        [ShowInInspector] public bool IsShowdown { get; private set; }
        [ShowInInspector] public int CurrentRound { get; private set; } = 0;
        [ShowInInspector] public float TurnDuration { get; private set; } = 60f;
        [ShowInInspector] public float RemainingTime { get; private set; }

        public TaskCompletionSource<bool> ActionCompletionSource { get; private set; }
        public TaskCompletionSource<bool> TimerCompletionSource { get; private set; }
        private CancellationTokenSource TurnCancellationTokenSource { get; set; }
        private CancellationTokenSource GlobalCancellationTokenSource { get; set; }
        private PlayerManager PlayerManager { get; set; }
        private PlayerStartCountDown PlayerStartCountDown { get; set; }

        public TurnManager()
        {
        }

        public void Init(CancellationTokenSource globalCancellationTokenSource, PlayerManager playerManager)
        {
            GlobalCancellationTokenSource = globalCancellationTokenSource;
            PlayerManager = playerManager;
            PlayerStartCountDown = new PlayerStartCountDown(this);
        }

        private List<Player> InitializePlayers()
        {
            var allPlayers = PlayerManager.GetAllPlayers();
            var computerPlayers = allPlayers.Where(p => p is ComputerPlayer).ToList();
            var humanPlayers = allPlayers.Where(p => p is HumanPlayer).ToList();

            if (computerPlayers.Count == 0 || humanPlayers.Count == 0)
            {
                LogError("At least one computer player and one human player are required.");
                return null;
            }

            var orderedPlayers = new List<Player> { humanPlayers[0] }; // Human player first
            orderedPlayers.AddRange(computerPlayers); // Followed by computer players

            return orderedPlayers;
        }

        public void ResetForNewGame()
        {
            CurrentRound = 0;
            IsShowdown = false;
            LastBettor = null;
            LastRoundWinner = null;
            RoundStarter = null;
            CurrentPlayer = null;
            RemainingTime = TurnDuration;
            ActionCompletionSource = new TaskCompletionSource<bool>();
            TimerCompletionSource = new TaskCompletionSource<bool>();

            Players = InitializePlayers();
            Log("TurnManager reset for new game");
        }

        public void ResetForNewRound()
        {
            CurrentRound++;
            IsShowdown = false;
            LastBettor = null;

            if (CurrentRound == 1)
            {
                // First round of the game, human starts
                RoundStarter = Players[0]; // Human player starts
            }
            else
            {
                // Subsequent rounds
                RoundStarter = LastRoundWinner ?? GetNextPlayerInOrder(RoundStarter);
            }

            CurrentPlayer = RoundStarter;
            RemainingTime = TurnDuration;
            ActionCompletionSource = new TaskCompletionSource<bool>();
            TimerCompletionSource = new TaskCompletionSource<bool>();

            Log($"TurnManager reset for round {CurrentRound}");
        }

        public void StartTurn()
        {
            Log($"Turn started for {CurrentPlayer.GetType().Name}");
            Reset();
            TurnCancellationTokenSource = CancellationTokenSource.CreateLinkedTokenSource(GlobalCancellationTokenSource.Token);

            StartTimer();
            EventBus.Publish(new UpdateTurnState(CurrentPlayer));
        }

        private async void StartTimer()
        {
            Log($"Timer started. Duration: {TurnDuration}");
            int remainingSeconds = (int)TurnDuration;

            try
            {
                while (remainingSeconds > 0)
                {
                    if (TurnCancellationTokenSource.IsCancellationRequested)
                    {
                        Log("Timer cancelled");
                        return;
                    }

                    RemainingTime = remainingSeconds;
                    Log($"Timer update: {remainingSeconds}s remaining");
                    EventBus.Publish(PlayerStartCountDown);

                    await Task.Delay(1000, TurnCancellationTokenSource.Token);
                    remainingSeconds--;
                }

                RemainingTime = 0;
                EventBus.Publish(PlayerStartCountDown);
                Log("Timer completed");
                TimerCompletionSource.TrySetResult(true);
            }
            catch (Exception ex)
            {
                LogError($"Exception in StartTimer: {ex.Message}");
                TimerCompletionSource.TrySetException(ex);
            }
        }

        public Task SwitchTurn()
        {
            if (GlobalCancellationTokenSource.IsCancellationRequested) return Task.CompletedTask;

            CurrentPlayer = GetNextPlayerInOrder(CurrentPlayer);
            Log($"Switching turn to {CurrentPlayer.GetType().Name}");
            ActionCompletionSource.TrySetResult(true);

            StartTurn();
            return Task.CompletedTask;
        }

        private Player GetNextPlayerInOrder(Player currentPlayer)
        {
            int currentIndex = Players.IndexOf(currentPlayer);
            for (int i = 1; i <= Players.Count; i++)
            {
                int nextIndex = (currentIndex + i) % Players.Count;
                Player nextPlayer = Players[nextIndex];
                if (PlayerManager.GetActivePlayers().Contains(nextPlayer))
                {
                    return nextPlayer;
                }
            }
            throw new InvalidOperationException("No active players found");
        }

        public async Task StopTurn()
        {
            Log("Stopping turn");
            TurnCancellationTokenSource?.Cancel();
            TurnCancellationTokenSource?.Dispose();
            TurnCancellationTokenSource = CancellationTokenSource.CreateLinkedTokenSource(GlobalCancellationTokenSource.Token);
            EventBus.Publish(new PlayerStopCountDown(CurrentPlayer));
            await Task.Yield();
        }

        private void Reset()
        {
            RemainingTime = TurnDuration;
            ActionCompletionSource = new TaskCompletionSource<bool>();
            TimerCompletionSource = new TaskCompletionSource<bool>();
            Log($"Reset completed. RemainingTime set to {RemainingTime}");
        }

        public void SetLastRoundWinner(Player player)
        {
            LastRoundWinner = player;
        }

        public void SetLastBettor(Player player)
        {
            LastBettor = player;
        }

        public void CallShow()
        {
            IsShowdown = true;
        }

        public bool IsRoundComplete()
        {
            var activePlayers = PlayerManager.GetActivePlayers();

            if (activePlayers.Count <= 1)
            {
                return true; // Round ends if all but one player have folded
            }

            if (IsShowdown)
            {
                return true; // Round ends if there's a showdown
            }

            // Round continues if the current player isn't the last bettor
            return CurrentPlayer == LastBettor;
        }

        private void Log(string message)
        {
            GameLogger.Log($"[Turn {CurrentRound}] {message}");
        }

        private void LogError(string message)
        {
            GameLogger.LogError($"[Turn {CurrentRound}] {message}");
        }
    }
}


// ---

