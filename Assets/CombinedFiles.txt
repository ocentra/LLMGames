// File: PlayerDecisionBettingEvent.cs
// File Usage:
//   No direct file usage found

// Class Information:
//   Class: PlayerDecisionBettingEvent
//   Inherits/Implements:
//     - PlayerDecisionEvent

// Event Bus Usage:
//   No event bus usage found

// Methods:
// Method: public override void NetworkSerialize(BufferSerializer<T> serializer)
//   Overrides: PlayerDecisionEvent.NetworkSerialize
//   Generic Method with parameters: T
//   No usages found
//

// Source Code:
using Unity.Netcode;

namespace OcentraAI.LLMGames.Events
{
    public class PlayerDecisionBettingEvent : PlayerDecisionEvent
    {
        public PlayerDecisionBettingEvent(PlayerDecision decision)
            : base(decision)
        {
        }

        public PlayerDecisionBettingEvent() { }

        public override void NetworkSerialize<T>(BufferSerializer<T> serializer)
        {
            base.NetworkSerialize(serializer);
        }
    }
}

// --------------------------------

// File: PlayerDecisionEvent.cs
// File Usage:
//   No direct file usage found

// Class Information:
//   Class: PlayerDecisionEvent
//   Inherits/Implements:
//     - EventArgsBase
//     - INetworkSerializable

// Event Bus Usage:
//   No event bus usage found

// Methods:
// Method: public virtual void NetworkSerialize(BufferSerializer<T> serializer)
//   Generic Method with parameters: T
//   No usages found
//

// Source Code:
using Unity.Netcode;
using Unity.Collections;

namespace OcentraAI.LLMGames.Events
{
    public class PlayerDecisionEvent : EventArgsBase, INetworkSerializable
    {
        public PlayerDecision Decision;
       

        public PlayerDecisionEvent(PlayerDecision decision)
        {
            Decision = decision;
           
        }

        public PlayerDecisionEvent() { }

        public virtual void NetworkSerialize<T>(BufferSerializer<T> serializer) where T : IReaderWriter
        {
            int decisionId = Decision?.DecisionId ?? 0;
            serializer.SerializeValue(ref decisionId);

            if (serializer.IsReader)
            {
                Decision = PlayerDecision.FromId(decisionId);
            }
        }
    }
}

// --------------------------------

// File: PlayerDecisionPickAndSwapEvent.cs
// File Usage:
//   No direct file usage found

// Class Information:
//   Class: PlayerDecisionPickAndSwapEvent
//   Inherits/Implements:
//     - PlayerDecisionEvent

// Event Bus Usage:
//   No event bus usage found

// Methods:
// Method: public override void NetworkSerialize(BufferSerializer<T> serializer)
//   Overrides: PlayerDecisionEvent.NetworkSerialize
//   Generic Method with parameters: T
//   No usages found
//

// Source Code:
using Unity.Netcode;

namespace OcentraAI.LLMGames.Events
{
    public class PlayerDecisionPickAndSwapEvent : PlayerDecisionEvent
    {
        public string CardInHand;
        public string DraggedCard;

        public PlayerDecisionPickAndSwapEvent(PlayerDecision decision, string cardInHand, string draggedCard) : base(decision)
        {
            CardInHand = cardInHand;
            DraggedCard = draggedCard;
        }
        

        public override void NetworkSerialize<T>(BufferSerializer<T> serializer)
        {
            base.NetworkSerialize(serializer);
            serializer.SerializeValue(ref CardInHand);
            serializer.SerializeValue(ref DraggedCard);
        }
    }
}

// --------------------------------

// File: PlayerDecisionRaiseBetEvent.cs
// File Usage:
//   No direct file usage found

// Class Information:
//   Class: PlayerDecisionRaiseBetEvent
//   Inherits/Implements:
//     - PlayerDecisionEvent

// Event Bus Usage:
//   No event bus usage found

// Methods:
// Method: public override void NetworkSerialize(BufferSerializer<T> serializer)
//   Overrides: PlayerDecisionEvent.NetworkSerialize
//   Generic Method with parameters: T
//   No usages found
//

// Source Code:
using Unity.Netcode;

namespace OcentraAI.LLMGames.Events
{
    public class PlayerDecisionRaiseBetEvent : PlayerDecisionEvent
    {
        public float Amount;

        public PlayerDecisionRaiseBetEvent(PlayerDecision decision, float amount)
            : base(decision)
        {
            Amount = amount;
        }

        public PlayerDecisionRaiseBetEvent() { }

        public override void NetworkSerialize<T>(BufferSerializer<T> serializer)
        {
            base.NetworkSerialize(serializer);
            serializer.SerializeValue(ref Amount);
        }
    }


}

// --------------------------------

// File: PlayerDecisionUIEvent.cs
// File Usage:
//   No direct file usage found

// Class Information:
//   Class: PlayerDecisionUIEvent
//   Inherits/Implements:
//     - PlayerDecisionEvent

// Event Bus Usage:
//   No event bus usage found

// Methods:
// Method: public override void NetworkSerialize(BufferSerializer<T> serializer)
//   Overrides: PlayerDecisionEvent.NetworkSerialize
//   Generic Method with parameters: T
//   No usages found
//

// Source Code:
using Unity.Netcode;

namespace OcentraAI.LLMGames.Events
{
    public class PlayerDecisionUIEvent : PlayerDecisionEvent
    {
        public PlayerDecisionUIEvent(PlayerDecision decision)
            : base(decision)
        {
        }

        public PlayerDecisionUIEvent() { }

        public override void NetworkSerialize<T>(BufferSerializer<T> serializer)
        {
            base.NetworkSerialize(serializer);
        }
    }
}

// --------------------------------

// File: PlayerDecisionWildcardEvent.cs
// File Usage:
//   No direct file usage found

// Class Information:
//   Class: PlayerDecisionWildcardEvent
//   Inherits/Implements:
//     - PlayerDecisionEvent

// Event Bus Usage:
//   No event bus usage found

// Methods:
// Method: public override void NetworkSerialize(BufferSerializer<T> serializer)
//   Overrides: PlayerDecisionEvent.NetworkSerialize
//   Generic Method with parameters: T
//   No usages found
//

// Source Code:
using Unity.Netcode;

namespace OcentraAI.LLMGames.Events
{
    public class PlayerDecisionWildcardEvent : PlayerDecisionEvent
    {
        public PlayerDecisionWildcardEvent(PlayerDecision decision)
            : base(decision)
        {
        }

        public PlayerDecisionWildcardEvent() { }

        public override void NetworkSerialize<T>(BufferSerializer<T> serializer)
        {
            base.NetworkSerialize(serializer);
        }
    }
}

// --------------------------------

// File: ProcessDecisionEvent.cs
// File Usage:
//   No direct file usage found

// Class Information:
//   Class: ProcessDecisionEvent
//   Inherits/Implements:
//     - EventArgsBase

// Event Bus Usage:
//   No event bus usage found

// Methods:

// Source Code:

namespace OcentraAI.LLMGames.Events
{
    public class ProcessDecisionEvent : EventArgsBase
    {
        public PlayerDecisionEvent DecisionEvent { get; }
        public ulong PlayerId { get; }

        public ProcessDecisionEvent(PlayerDecisionEvent decisionEvent, ulong playerId)
        {
            DecisionEvent = decisionEvent;
            PlayerId = playerId;
        }
    }
}

// --------------------------------

